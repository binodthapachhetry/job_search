job_search:
  description: |
    You have a search tool that returns a list of web search results based on the query: {query}.
    Your goal is to identify *actual job postings* from these results and extract key information.
    1. Examine ALL the search results provided by the tool.
    2. Filter the results: Select only those links that appear to be specific job postings on company career pages or reputable job boards (like LinkedIn jobs, Indeed postings, Glassdoor jobs, etc.). Discard links to general search result pages, articles, PDFs, forums, or unrelated websites.
    3. For each identified job posting link, try to extract these details from the search result snippet or title - "Job Title, Salary, Company Name, Location, and the direct URL to the job posting". Use the snippet for a brief Description. If a detail isn't available in the search result, omit it or mark it as 'Not Available'.
    4. Compile a list of these extracted job postings. Aim to find as many relevant job postings as possible from the provided search results.
  expected_output: A structured output as a valid json with the list of jobs found with all their information. Make sure that field names are kept the same.

filter_jobs:
  description: |
    You are given a JSON list of potential job postings in the context from the previous step. The original user query was: {query}.
    Your task is to filter this list down to the top 10-15 most relevant job postings based *only* on the job titles and descriptions provided in the list, compared against the original query.
    Do not use any external tools. Simply analyze the text provided in the context.
    Prioritize jobs whose titles and descriptions most closely match the keywords and intent of the original query.
  expected_output: A valid JSON list containing *only* the selected top 10-15 most relevant job objects from the input context. Preserve the exact structure and fields of the selected job objects.

job_rating:
  description: |
    Your primary input is a JSON list of potential jobs provided in the context from the previous step.
    Your task is to rate each of these jobs based on a resume.
    Follow these steps precisely:
    1. Use your 'Read a file's content' tool to access and read the text content of the resume file.
    2. Iterate through EACH job object in the JSON list received in the context (`{context}`).
    3. For each job from the context, compare its 'title' and 'description' against the resume content you read in step 1.
    4. Determine a suitability rating (1-10, 10=best fit) based on how well the job requirements align with the resume's experience and skills.
    5. Add two new fields to EACH original job object from the context:
        - 'rating': The numerical rating (1-10).
        - 'rating_description': A 1-2 sentence explanation for the rating.
    6. Ensure your final output preserves ALL original fields for each job from the context, merely adding the two new rating fields. Do NOT use the resume content to create new job entries.
  expected_output:  A valid JSON list. Each object in the list must be one of the job objects received from the context, augmented with the 'rating' and 'rating_description' fields. Maintain all original field names and values from the input context jobs.

evaluate_company:
  description: |
    Using your tools find information about the company of jobs.
    Information can include company culture reviews, company financial reports, and stock performance. 
    provide an additional rating for the company in a field called company_rating.
    The rating is between 1-10 where 10 is the best rating. Every job should have a rating.  
    Additionally add a company_rating_description field that explains the reasoning behind the number of rating in 1 or 2 sentences.
    Make sure that all information about the jobs is also maintained in the output.
  expected_output:  A structured output as a valid json of the list of jobs found and their respective ratings, make sure to structure all information according this model {output_schema}

structure_results:
  description: |
    Use all the context to structure the output as needed for the final reporting.
  expected_output: A structured output as a valid json of the list of jobs found and their respective ratings. Make sure that the final output you provide is a valid json with schema {output_schema}
